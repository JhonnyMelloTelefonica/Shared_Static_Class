// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO.Compression;
using System.Runtime.ConstrainedExecution;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Microsoft.Extensions.Configuration;
using Microsoft.Office.Interop.Excel;
using Shared_Static_Class.Converters;
using Shared_Static_Class.Data;
using Shared_Static_Class.Model_Demanda_Context;

namespace Shared_Static_Class.DB_Context_Vivo_MAIS;

public partial class CardapioDigitalContext : DbContext
{
    public CardapioDigitalContext()
    {
    }

    public CardapioDigitalContext(DbContextOptions<CardapioDigitalContext> options)
        : base(options)
    {

    }

    public virtual DbSet<ACESSOS_MOBILE> ACESSOS_MOBILE { get; set; }
    public virtual DbSet<PERFIL_USUARIO> PERFIL_USUARIO { get; set; }
    public virtual DbSet<PRODUTOS_CARDAPIO> PRODUTOS_CARDAPIO { get; set; }
    public virtual DbSet<FICHA_TECNICA> FICHA_TECNICA { get; set; }
    public virtual DbSet<PRODUTO_IMAGEM> PRODUTO_IMAGENS { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        optionsBuilder.UseSqlServer("Data Source=10.124.100.153;Initial Catalog=Vivo_MAIS;TrustServerCertificate=True;User ID=RegionalNE;Password=RegionalNEvivo2019;MultipleActiveResultSets=true"
            , o =>
            {
                o.UseCompatibilityLevel(120);
                o.CommandTimeout(36000);
                o.UseQuerySplittingBehavior(QuerySplittingBehavior.SplitQuery);
                o.MigrationsHistoryTable("__EFMigrationsHistory", "Cardapio");
                o.MigrationsAssembly("Api Vivo Apps");
            });
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_CI_AS");

        modelBuilder.Entity<ACESSOS_MOBILE>().ToTable("ACESSOS_MOBILE", t => t.ExcludeFromMigrations());
        modelBuilder.Entity<PERFIL_USUARIO>().ToTable("PERFIL_USUARIO", t => t.ExcludeFromMigrations());

        var produtoId = Guid.NewGuid();

        // Seed PRODUTOS_CARDAPIO
        modelBuilder.Entity<PRODUTOS_CARDAPIO>().HasData(
            new PRODUTOS_CARDAPIO
            {
                ID_PRODUTO = produtoId,
                Nome = "Samsung A54 5G",
                Descrição = "Apenas um Celular",
                Avaliacao = 65,
                Categoria = Categoria.SMARTPHONE,
                Fabricante = "Samsung",
                Cor = "Preta",
                IsOferta = false,
                Valor = 799.0m,
                MaxParcelas = 24,
                MaxParcelasSemJuros = 10,
                DATA_INCLUSÃO = DateTime.Now,
                DATA_MODIFICAÇÃO = DateTime.Now,
                MAT_INCLUSÃO = 151191,
                MAT_MODIFICAÇÃO = 151191
            });

        modelBuilder.Entity<FICHA_TECNICA>().HasData(
            new FICHA_TECNICA
            {
                ID_FICHA = Guid.NewGuid(),
                ID_PRODUTO = produtoId,
                Especificação = "Tela",
                Valor = "6.5 polegadas",
                IsImportant = true,
                IsInfoAdicional = false
            },
            new FICHA_TECNICA
            {
                ID_FICHA = Guid.NewGuid(),
                ID_PRODUTO = produtoId,
                Especificação = "Memória",
                Valor = "128GB",
                IsImportant = true,
                IsInfoAdicional = false
            }
        );
        
        string folderPath = Path.Combine(System.IO.Directory.GetCurrentDirectory(), "FilesTemplates/CardapioDigital");
        List<PRODUTO_IMAGEM> imagens = [];
        for (int i = 1; i < 6; i++)
        {
            imagens.Add(new PRODUTO_IMAGEM
            {
                ID_IMAGEM = Guid.NewGuid(),
                ID_PRODUTO = produtoId,
                Imagem = SharedConverter.CompressFile(File.ReadAllBytes(Path.Combine(folderPath, $"A54{i}.jpg")))
            });
        }

        modelBuilder.Entity<PRODUTO_IMAGEM>().HasData(imagens);


        modelBuilder.Entity<PRODUTOS_CARDAPIO>(entity =>
        {
            entity.Property(e => e.ID_PRODUTO)
                .HasValueGenerator<SequentialGuidValueGenerator>();

            entity.HasMany(x => x.Ficha)
            .WithOne(x => x.Produto)
            .HasForeignKey(x => x.ID_PRODUTO)
            .IsRequired().OnDelete(DeleteBehavior.Cascade);

            entity.HasMany(x => x.Imagens)
                .WithOne(x => x.Produto)
                .HasForeignKey(x => x.ID_PRODUTO)
                .IsRequired().OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(x => x.Responsavel_Inclusao)
                .WithOne()
                .HasForeignKey<PRODUTOS_CARDAPIO>("MAT_INCLUSÃO")
                .HasPrincipalKey<ACESSOS_MOBILE>("MATRICULA")
                .IsRequired(false);

            entity.HasOne(x => x.Responsavel_Modificacao)
                .WithOne()
                .HasForeignKey<PRODUTOS_CARDAPIO>("MAT_MODIFICAÇÃO")
                .HasPrincipalKey<ACESSOS_MOBILE>("MATRICULA")
                .IsRequired(false);
        });






        OnModelCreatingPartial(modelBuilder);
    }
    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

}